[project]
name = "pycrograd"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "ipykernel>=6.29.5",
    "matplotlib>=3.9.2",
    "numpy>=2.1.2",
    "profilehooks>=1.13.0",
    "scikit-learn>=1.5.2",
    "snakeviz>=2.2.0",
    "torch>=2.5.1",
    "torchvision>=0.20.1",
    "typer>=0.12.5",
]

[tool.uv]
dev-dependencies = ["pytest>=8.3.3", "ruff>=0.7.1"]

#########################################
# Linting and Formatting Configurations #
#########################################

[tool.ruff]
# Exclude a variety of commonly ignored directories.
extend-include = ["*.ipynb"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

line-length = 88
indent-width = 4

# Assume Python 3.8
target-version = "py312"

[tool.ruff.lint]
# Ruff rules 
# https://docs.astral.sh/ruff/rules/
select = [
    # Defaults
    "E", # pycodestyle
    "F", # Pyflakes
    # Custom rules
    "W",    # pycodestyle warnings
    "C",    # McCabe complexity
    "B",    # flake8-bugbear
    "I",    # isort
    "UP",   # pyupgrade
    "YTT",  # flake8-2020
    "RUF",  # Ruff-specific rules
    "NPY",
    "FURB",
    "PERF",
    "ERA",
    # These rules can be helpful and should be activated at some point 
    # "ANN", # flake8-annotations
    # "TRY",
    # "PL",
]
ignore = ["E501"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

#########################
# Typing Configurations #
#########################

[tool.pyright]
exclude = ["**/__pycache__", ".venv"]

typeCheckingMode = "strict"

# Setting explicitly defined from Pyright Configuration
# https://github.com/microsoft/pyright/blob/main/docs/configuration.md

reportMissingTypeStubs = "none"
reportUnknownMemberType = "none"
reportUnknownArgumentType = "none"
reportUnknownVariableType = "none"
reportCallInDefaultInitializer = "warning"
reportUnnecessaryTypeIgnoreComment = "warning"
reportShadowedImports = "warning"
reportPropertyTypeMismatch = "warning"
reportPrivateImportUsage = "none"
reportConstantRedefinition = "none"
